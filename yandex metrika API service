<?php
namespace App\Classes\Yandex;
use App\Entity\Yandex\Yandex;
use App\Repository\Yandex\PeriodTypeRepository;
use App\Repository\Yandex\YandexRepository;
use Doctrine\ORM\EntityManager;
use Doctrine\ORM\ORMException;
use DoctrineInstance;

class YandexManager
{
    /** @var EntityManager $em*/
    private EntityManager $em;

    /** @var YandexRepository $yaRepo*/
    private YandexRepository $yaRepo;

    /** @var PeriodTypeRepository $period */
    private PeriodTypeRepository $period;

    public function __construct()
    {
        $this->em = DoctrineInstance::getInstance()->getEm();
        $this->yaRepo = $this->em->getRepository("App\Entity\Yandex\Yandex");
        $this->period = $this->em->getRepository("App\Entity\Yandex\PeriodType");

    }

    public function create(int $tourId, int $visits, string $url, $periodId): Yandex
    {
        $yandex = new Yandex();

        $period = $this->period->find($periodId);

        $yandex->setTourId($tourId);
        $yandex->setVisits($visits);
        $yandex->setUrl($url);
        $yandex->setPeriod($period);

        try {
            $this->em->persist($yandex);
            $this->em->flush();
        } catch (ORMException $e) {
            echo $e->getMessage();
        }


        return $yandex;
    }

    public function RemoveEmoji(string $string): string {

        $regex_emoticons = '/[\x{1F600}-\x{1F64F}]/u';
        $clear_string = preg_replace($regex_emoticons, '', $string);

        $regex_symbols = '/[\x{1F300}-\x{1F5FF}]/u';
        $clear_string = preg_replace($regex_symbols, '', $clear_string);

        $regex_transport = '/[\x{1F680}-\x{1F6FF}]/u';
        $clear_string = preg_replace($regex_transport, '', $clear_string);

        $regex_misc = '/[\x{2600}-\x{26FF}]/u';
        $clear_string = preg_replace($regex_misc, '', $clear_string);

        $regex_dingbats = '/[\x{2700}-\x{27BF}]/u';
        $clear_string = preg_replace($regex_dingbats, '', $clear_string);

        return $clear_string;
    }

    function getTourWeightByTourIdAndPeriod(int $tourID, int $periodId): int
    {

        $period = $this->period->find($periodId);
        $visitsAr = $this->yaRepo->findBy(['tourId' => $tourID, 'period' => $period]);

        $visits = 0;
        foreach ($visitsAr as $item){

            $visits = $visits + $item->getVisits();

        }

        return $visits;
    }

    public function checkTableIsEmpty(): bool
    {
        $count = $this->yaRepo->count([]);
        if($count === 0)
            return true;

        return false;
    }
}
